upstream keycloak_backend {
  server keycloak:8080;
}
server {
    #listen 127.0.0.1;
    listen 80;
    server_name keycloak.example.com;
    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    listen 443 ssl;
    server_name keycloak.example.com;
    ssl_certificate /etc/nginx/certs/mydomain.com.crt;
    ssl_certificate_key /etc/nginx/certs/mydomain.com.key;
    # ssl_certificate /etc/nginx/certs/yourcert.crt;
    # ssl_certificate_key /etc/nginx/certs/yourkey.key;

    location /auth/ {
        proxy_pass "http://keycloak_backend/auth/";
        proxy_set_header    Host $host;
        proxy_set_header    X-Forwarded-For $proxy_protocol_addr; # To forward the original client's IP address 
        proxy_set_header    X-Forwarded-Proto $scheme; # to forward the  original protocol (HTTP or HTTPS)
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host $server_name;
    }
    location /auth/admin {
        proxy_pass "http://keycloak_backend/auth/admin";
        proxy_set_header    Host $host;
        proxy_set_header    X-Forwarded-For $proxy_protocol_addr; # To forward the original client's IP address 
        proxy_set_header    X-Forwarded-Proto $scheme; # to forward the  original protocol (HTTP or HTTPS)
        proxy_set_header    X-Real-IP $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Host $server_name;
    }
 
}
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
